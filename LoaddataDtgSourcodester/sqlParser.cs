//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\axelg\xRegistro\sql.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class sqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		JOINKW=1, ONKW=2, LEFTKW=3, INNERKW=4, RIGHTKW=5, FULLKW=6, WHEREKW=7, 
		SELECTKW=8, FROMKW=9, LT=10, GT=11, DOT=12, QUOTE=13, ALL=14, SEP=15, 
		EQ=16, SEMI=17, WS=18, TEXT=19;
	public const int
		RULE_start = 0, RULE_instruction = 1, RULE_columns = 2, RULE_column = 3, 
		RULE_table = 4, RULE_where_clause = 5, RULE_condition = 6, RULE_comparison = 7, 
		RULE_equality = 8, RULE_less_eq_than = 9, RULE_less_than = 10, RULE_greater_eq_than = 11, 
		RULE_greater_than = 12, RULE_string = 13, RULE_join_clause = 14, RULE_join_modifier = 15;
	public static readonly string[] ruleNames = {
		"start", "instruction", "columns", "column", "table", "where_clause", 
		"condition", "comparison", "equality", "less_eq_than", "less_than", "greater_eq_than", 
		"greater_than", "string", "join_clause", "join_modifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'JOIN'", "'ON'", "'LEFT'", "'INNER'", "'RIGHT'", "'FULL'", "'WHERE'", 
		"'SELECT'", "'FROM'", "'<'", "'>'", "'.'", "'''", "'*'", "','", "'='", 
		"';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "JOINKW", "ONKW", "LEFTKW", "INNERKW", "RIGHTKW", "FULLKW", "WHEREKW", 
		"SELECTKW", "FROMKW", "LT", "GT", "DOT", "QUOTE", "ALL", "SEP", "EQ", 
		"SEMI", "WS", "TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static sqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(sqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32;
				instruction();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SELECTKW );
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTKW() { return GetToken(sqlParser.SELECTKW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(sqlParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(sqlParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROMKW() { return GetToken(sqlParser.FROMKW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(sqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 2, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(SELECTKW);
			State = 40;
			Match(WS);
			State = 41;
			columns();
			State = 42;
			Match(WS);
			State = 43;
			Match(FROMKW);
			State = 44;
			Match(WS);
			State = 45;
			table();
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 46;
				Match(WS);
				State = 47;
				join_clause();
				}
				break;
			}
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 50;
				Match(WS);
				State = 51;
				where_clause();
				}
			}

			State = 54;
			Match(SEMI);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 55;
				Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(sqlParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(sqlParser.SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(sqlParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(sqlParser.WS, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsContext columns() {
		ColumnsContext _localctx = new ColumnsContext(Context, State);
		EnterRule(_localctx, 4, RULE_columns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			column();
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEP) {
				{
				{
				State = 59;
				Match(SEP);
				State = 60;
				Match(WS);
				State = 61;
				column();
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(sqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(sqlParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(sqlParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(sqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(sqlParser.DOT, i);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 6, RULE_column);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				Match(ALL);
				}
				break;
			case TEXT:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 68;
				Match(TEXT);
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 69;
					Match(DOT);
					State = 70;
					Match(TEXT);
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(sqlParser.TEXT, 0); }
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 8, RULE_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEREKW() { return GetToken(sqlParser.WHEREKW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(sqlParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(WHEREKW);
			State = 81;
			Match(WS);
			State = 82;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 12, RULE_condition);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				column();
				State = 86;
				comparison();
				State = 87;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				column();
				State = 90;
				comparison();
				State = 91;
				column();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93;
				@string();
				State = 94;
				comparison();
				State = 95;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97;
				@string();
				State = 98;
				comparison();
				State = 99;
				column();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(sqlParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(sqlParser.WS, i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 14, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 103;
				Match(WS);
				}
			}

			{
			State = 106;
			equality();
			}
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 107;
				Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(sqlParser.EQ, 0); }
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(Context, State);
		EnterRule(_localctx, 16, RULE_equality);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Less_eq_thanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(sqlParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(sqlParser.EQ, 0); }
		public Less_eq_thanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_less_eq_than; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLess_eq_than(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Less_eq_thanContext less_eq_than() {
		Less_eq_thanContext _localctx = new Less_eq_thanContext(Context, State);
		EnterRule(_localctx, 18, RULE_less_eq_than);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(LT);
			State = 113;
			Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Less_thanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(sqlParser.LT, 0); }
		public Less_thanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_less_than; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLess_than(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Less_thanContext less_than() {
		Less_thanContext _localctx = new Less_thanContext(Context, State);
		EnterRule(_localctx, 20, RULE_less_than);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Greater_eq_thanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(sqlParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(sqlParser.EQ, 0); }
		public Greater_eq_thanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greater_eq_than; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_eq_than(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Greater_eq_thanContext greater_eq_than() {
		Greater_eq_thanContext _localctx = new Greater_eq_thanContext(Context, State);
		EnterRule(_localctx, 22, RULE_greater_eq_than);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(GT);
			State = 118;
			Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Greater_thanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(sqlParser.GT, 0); }
		public Greater_thanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greater_than; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Greater_thanContext greater_than() {
		Greater_thanContext _localctx = new Greater_thanContext(Context, State);
		EnterRule(_localctx, 24, RULE_greater_than);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(sqlParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(sqlParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(sqlParser.TEXT, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 26, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(QUOTE);
			State = 123;
			Match(TEXT);
			State = 124;
			Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Join_modifierContext join_modifier() {
			return GetRuleContext<Join_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(sqlParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(sqlParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOINKW() { return GetToken(sqlParser.JOINKW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONKW() { return GetToken(sqlParser.ONKW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(sqlParser.EQ, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			join_modifier();
			State = 127;
			Match(WS);
			State = 128;
			Match(JOINKW);
			State = 129;
			Match(WS);
			State = 130;
			table();
			State = 131;
			Match(WS);
			State = 132;
			Match(ONKW);
			State = 133;
			Match(WS);
			State = 134;
			column();
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 135;
				Match(WS);
				}
			}

			State = 138;
			Match(EQ);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 139;
				Match(WS);
				}
			}

			State = 142;
			column();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNERKW() { return GetToken(sqlParser.INNERKW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTKW() { return GetToken(sqlParser.LEFTKW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTKW() { return GetToken(sqlParser.RIGHTKW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLKW() { return GetToken(sqlParser.FULLKW, 0); }
		public Join_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_modifierContext join_modifier() {
		Join_modifierContext _localctx = new Join_modifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_join_modifier);
		int _la;
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNERKW:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNERKW) {
					{
					State = 144;
					Match(INNERKW);
					}
				}

				}
				break;
			case LEFTKW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				Match(LEFTKW);
				}
				break;
			case RIGHTKW:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				Match(RIGHTKW);
				}
				break;
			case FULLKW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 149;
				Match(FULLKW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\x9B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x6', '\x2', '$', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '%', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x33', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x37', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', ';', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x41', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x44', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'J', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'M', '\v', '\x5', '\x5', '\x5', 'O', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'h', '\n', '\b', '\x3', '\t', '\x5', '\t', 'k', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'o', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x8B', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x8F', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x5', '\x11', 
		'\x94', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x99', '\n', '\x11', '\x3', '\x11', '\x2', '\x2', '\x12', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', '\x2', '\x2', '\x9D', '\x2', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '<', '\x3', '\x2', '\x2', '\x2', '\b', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'P', '\x3', '\x2', '\x2', '\x2', '\f', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'g', '\x3', '\x2', '\x2', '\x2', '\x10', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'p', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'r', '\x3', '\x2', '\x2', '\x2', '\x16', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 'w', '\x3', '\x2', '\x2', '\x2', '\x1A', 'z', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '|', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x80', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x98', '\x3', '\x2', '\x2', '\x2', '\"', '$', 
		'\x5', '\x4', '\x3', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', 
		'%', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\a', '\x2', '\x2', '\x3', '(', '\x3', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\a', '\n', '\x2', '\x2', '*', '+', '\a', '\x14', 
		'\x2', '\x2', '+', ',', '\x5', '\x6', '\x4', '\x2', ',', '-', '\a', '\x14', 
		'\x2', '\x2', '-', '.', '\a', '\v', '\x2', '\x2', '.', '/', '\a', '\x14', 
		'\x2', '\x2', '/', '\x32', '\x5', '\n', '\x6', '\x2', '\x30', '\x31', 
		'\a', '\x14', '\x2', '\x2', '\x31', '\x33', '\x5', '\x1E', '\x10', '\x2', 
		'\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\a', '\x14', '\x2', '\x2', '\x35', '\x37', '\x5', '\f', '\a', '\x2', 
		'\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', ':', 
		'\a', '\x13', '\x2', '\x2', '\x39', ';', '\a', '\x14', '\x2', '\x2', ':', 
		'\x39', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', 
		';', '\x5', '\x3', '\x2', '\x2', '\x2', '<', '\x42', '\x5', '\b', '\x5', 
		'\x2', '=', '>', '\a', '\x11', '\x2', '\x2', '>', '?', '\a', '\x14', '\x2', 
		'\x2', '?', '\x41', '\x5', '\b', '\x5', '\x2', '@', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\a', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'O', '\a', '\x10', '\x2', '\x2', '\x46', 'K', '\a', 
		'\x15', '\x2', '\x2', 'G', 'H', '\a', '\xE', '\x2', '\x2', 'H', 'J', '\a', 
		'\x15', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'M', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 
		'L', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 
		'M', 'K', '\x3', '\x2', '\x2', '\x2', 'N', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'N', '\x46', '\x3', '\x2', '\x2', '\x2', 'O', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\a', '\x15', '\x2', '\x2', 'Q', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\a', '\t', '\x2', '\x2', 'S', 'T', '\a', 
		'\x14', '\x2', '\x2', 'T', 'U', '\x5', '\xE', '\b', '\x2', 'U', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'V', 'h', '\x3', '\x2', '\x2', '\x2', 'W', 
		'X', '\x5', '\b', '\x5', '\x2', 'X', 'Y', '\x5', '\x10', '\t', '\x2', 
		'Y', 'Z', '\x5', '\x1C', '\xF', '\x2', 'Z', 'h', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x5', '\b', '\x5', '\x2', '\\', ']', '\x5', '\x10', 
		'\t', '\x2', ']', '^', '\x5', '\b', '\x5', '\x2', '^', 'h', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x5', '\x1C', '\xF', '\x2', '`', '\x61', '\x5', 
		'\x10', '\t', '\x2', '\x61', '\x62', '\x5', '\x1C', '\xF', '\x2', '\x62', 
		'h', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x5', '\x1C', '\xF', 
		'\x2', '\x64', '\x65', '\x5', '\x10', '\t', '\x2', '\x65', '\x66', '\x5', 
		'\b', '\x5', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', 'V', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'W', '\x3', '\x2', '\x2', '\x2', 'g', 
		'[', '\x3', '\x2', '\x2', '\x2', 'g', '_', '\x3', '\x2', '\x2', '\x2', 
		'g', '\x63', '\x3', '\x2', '\x2', '\x2', 'h', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'k', '\a', '\x14', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'n', '\x5', '\x12', '\n', '\x2', 'm', 'o', '\a', '\x14', '\x2', 
		'\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'o', '\x11', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x12', 
		'\x2', '\x2', 'q', '\x13', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', 
		'\f', '\x2', '\x2', 's', 't', '\a', '\x12', '\x2', '\x2', 't', '\x15', 
		'\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\f', '\x2', '\x2', 'v', '\x17', 
		'\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\r', '\x2', '\x2', 'x', 'y', 
		'\a', '\x12', '\x2', '\x2', 'y', '\x19', '\x3', '\x2', '\x2', '\x2', 'z', 
		'{', '\a', '\r', '\x2', '\x2', '{', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\a', '\xF', '\x2', '\x2', '}', '~', '\a', '\x15', '\x2', '\x2', 
		'~', '\x7F', '\a', '\xF', '\x2', '\x2', '\x7F', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x81', '\x5', ' ', '\x11', '\x2', '\x81', '\x82', 
		'\a', '\x14', '\x2', '\x2', '\x82', '\x83', '\a', '\x3', '\x2', '\x2', 
		'\x83', '\x84', '\a', '\x14', '\x2', '\x2', '\x84', '\x85', '\x5', '\n', 
		'\x6', '\x2', '\x85', '\x86', '\a', '\x14', '\x2', '\x2', '\x86', '\x87', 
		'\a', '\x4', '\x2', '\x2', '\x87', '\x88', '\a', '\x14', '\x2', '\x2', 
		'\x88', '\x8A', '\x5', '\b', '\x5', '\x2', '\x89', '\x8B', '\a', '\x14', 
		'\x2', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8E', '\a', '\x12', '\x2', '\x2', '\x8D', '\x8F', '\a', '\x14', 
		'\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x91', '\x5', '\b', '\x5', '\x2', '\x91', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x94', '\a', '\x6', '\x2', '\x2', '\x93', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x99', '\x3', '\x2', '\x2', '\x2', '\x95', '\x99', '\a', '\x5', 
		'\x2', '\x2', '\x96', '\x99', '\a', '\a', '\x2', '\x2', '\x97', '\x99', 
		'\a', '\b', '\x2', '\x2', '\x98', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '%', '\x32', '\x36', ':', '\x42', 
		'K', 'N', 'g', 'j', 'n', '\x8A', '\x8E', '\x93', '\x98',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
