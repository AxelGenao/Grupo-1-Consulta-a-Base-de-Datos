//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\axelg\xRegistro\sql.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class sqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		JOINKW=1, ONKW=2, LEFTKW=3, INNERKW=4, RIGHTKW=5, FULLKW=6, WHEREKW=7, 
		SELECTKW=8, FROMKW=9, LT=10, GT=11, DOT=12, QUOTE=13, ALL=14, SEP=15, 
		EQ=16, SEMI=17, WS=18, TEXT=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"JOINKW", "ONKW", "LEFTKW", "INNERKW", "RIGHTKW", "FULLKW", "WHEREKW", 
		"SELECTKW", "FROMKW", "LT", "GT", "DOT", "QUOTE", "ALL", "SEP", "EQ", 
		"SEMI", "WS", "TEXT"
	};


	public sqlLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public sqlLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'JOIN'", "'ON'", "'LEFT'", "'INNER'", "'RIGHT'", "'FULL'", "'WHERE'", 
		"'SELECT'", "'FROM'", "'<'", "'>'", "'.'", "'''", "'*'", "','", "'='", 
		"';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "JOINKW", "ONKW", "LEFTKW", "INNERKW", "RIGHTKW", "FULLKW", "WHEREKW", 
		"SELECTKW", "FROMKW", "LT", "GT", "DOT", "QUOTE", "ALL", "SEP", "EQ", 
		"SEMI", "WS", "TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static sqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x15', 's', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x6', 
		'\x13', 'k', '\n', '\x13', '\r', '\x13', '\xE', '\x13', 'l', '\x3', '\x14', 
		'\x6', '\x14', 'p', '\n', '\x14', '\r', '\x14', '\xE', '\x14', 'q', '\x2', 
		'\x2', '\x15', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', 
		'\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', 
		'!', '\x12', '#', '\x13', '%', '\x14', '\'', '\x15', '\x3', '\x2', '\x4', 
		'\x5', '\x2', '\f', '\f', '\xF', '\xF', '\"', '\"', '\x3', '\x2', '\x63', 
		'|', '\x2', 't', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x3', ')', '\x3', '\x2', '\x2', '\x2', '\x5', '.', '\x3', '\x2', 
		'\x2', '\x2', '\a', '\x31', '\x3', '\x2', '\x2', '\x2', '\t', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\v', '<', '\x3', '\x2', '\x2', '\x2', '\r', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\xF', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x11', 'M', '\x3', '\x2', '\x2', '\x2', '\x13', 'T', '\x3', '\x2', '\x2', 
		'\x2', '\x15', 'Y', '\x3', '\x2', '\x2', '\x2', '\x17', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x19', ']', '\x3', '\x2', '\x2', '\x2', '\x1B', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '!', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '#', 'g', '\x3', '\x2', '\x2', '\x2', '%', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\'', 'o', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', 'L', '\x2', 
		'\x2', '*', '+', '\a', 'Q', '\x2', '\x2', '+', ',', '\a', 'K', '\x2', 
		'\x2', ',', '-', '\a', 'P', '\x2', '\x2', '-', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\a', 'Q', '\x2', '\x2', '/', '\x30', '\a', 'P', '\x2', 
		'\x2', '\x30', '\x6', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', 
		'N', '\x2', '\x2', '\x32', '\x33', '\a', 'G', '\x2', '\x2', '\x33', '\x34', 
		'\a', 'H', '\x2', '\x2', '\x34', '\x35', '\a', 'V', '\x2', '\x2', '\x35', 
		'\b', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', 'K', '\x2', '\x2', 
		'\x37', '\x38', '\a', 'P', '\x2', '\x2', '\x38', '\x39', '\a', 'P', '\x2', 
		'\x2', '\x39', ':', '\a', 'G', '\x2', '\x2', ':', ';', '\a', 'T', '\x2', 
		'\x2', ';', '\n', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', 'T', '\x2', 
		'\x2', '=', '>', '\a', 'K', '\x2', '\x2', '>', '?', '\a', 'I', '\x2', 
		'\x2', '?', '@', '\a', 'J', '\x2', '\x2', '@', '\x41', '\a', 'V', '\x2', 
		'\x2', '\x41', '\f', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', 
		'H', '\x2', '\x2', '\x43', '\x44', '\a', 'W', '\x2', '\x2', '\x44', '\x45', 
		'\a', 'N', '\x2', '\x2', '\x45', '\x46', '\a', 'N', '\x2', '\x2', '\x46', 
		'\xE', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', 'Y', '\x2', '\x2', 
		'H', 'I', '\a', 'J', '\x2', '\x2', 'I', 'J', '\a', 'G', '\x2', '\x2', 
		'J', 'K', '\a', 'T', '\x2', '\x2', 'K', 'L', '\a', 'G', '\x2', '\x2', 
		'L', '\x10', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', 'U', '\x2', '\x2', 
		'N', 'O', '\a', 'G', '\x2', '\x2', 'O', 'P', '\a', 'N', '\x2', '\x2', 
		'P', 'Q', '\a', 'G', '\x2', '\x2', 'Q', 'R', '\a', '\x45', '\x2', '\x2', 
		'R', 'S', '\a', 'V', '\x2', '\x2', 'S', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\a', 'H', '\x2', '\x2', 'U', 'V', '\a', 'T', '\x2', '\x2', 
		'V', 'W', '\a', 'Q', '\x2', '\x2', 'W', 'X', '\a', 'O', '\x2', '\x2', 
		'X', '\x14', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '>', '\x2', '\x2', 
		'Z', '\x16', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '@', '\x2', 
		'\x2', '\\', '\x18', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x30', 
		'\x2', '\x2', '^', '\x1A', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', 
		')', '\x2', '\x2', '`', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', 
		'\a', ',', '\x2', '\x2', '\x62', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\a', '.', '\x2', '\x2', '\x64', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\a', '?', '\x2', '\x2', '\x66', '\"', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\a', '=', '\x2', '\x2', 'h', '$', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'k', '\t', '\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', '&', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'p', '\t', '\x3', '\x2', '\x2', 'o', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', '(', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\x2', 'l', 'q', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
